import asyncio

from pyrogram import Client, filters
from oldpyro import Client as Client1
from oldpyro.errors import ApiIdInvalid as ApiIdInvalid1
from oldpyro.errors import PasswordHashInvalid as PasswordHashInvalid1
from oldpyro.errors import PhoneCodeExpired as PhoneCodeExpired1
from oldpyro.errors import PhoneCodeInvalid as PhoneCodeInvalid1
from oldpyro.errors import PhoneNumberInvalid as PhoneNumberInvalid1
from oldpyro.errors import SessionPasswordNeeded as SessionPasswordNeeded1
from pyrogram.errors import (
    ApiIdInvalid,
    FloodWait,
    PasswordHashInvalid,
    PhoneCodeExpired,
    PhoneCodeInvalid,
    PhoneNumberInvalid,
    SessionPasswordNeeded,
)
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from telethon import TelegramClient
from telethon.errors import (
    ApiIdInvalidError,
    PasswordHashInvalidError,
    PhoneCodeExpiredError,
    PhoneCodeInvalidError,
    PhoneNumberInvalidError,
    SessionPasswordNeededError,
)
from telethon.sessions import StringSession
from telethon.tl.functions.channels import JoinChannelRequest
from pyromod.listen.listen import ListenerTimeout

from FallenRobot import SUPPORT_CHAT

keyboard = InlineKeyboardMarkup(
    [
        [InlineKeyboardButton(text=" ô·¥ú·¥Ä·¥õ s·¥õ Ä…™…¥…¢", callback_data="gensession")],
        )

gen_key = InlineKeyboardMarkup(
    [
        [
            InlineKeyboardButton(text="·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç v1", callback_data="pyrogram1"),
            InlineKeyboardButton(text="·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç v2", callback_data="pyrogram"),
        ],
        [InlineKeyboardButton(text="·¥õ·¥á ü·¥á·¥õ ú·¥è…¥", callback_data="telethon")],
    ]
)

retry_key = InlineKeyboardMarkup(
    [[InlineKeyboardButton(text="·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥", callback_data="gensession")]]
)



@pbot.on_callback_query(
    filters.regex(pattern=r"^(gensession|pyrogram|pyrogram1|telethon)$")
)
async def cb_choose(_, cq: CallbackQuery):
    await cq.answer()
    query = cq.matches[0].group(1)
    if query == "gensession":
        return await cq.message.reply_text(
            text="<b>¬ª ·¥ã ü…™·¥ã ·¥ò·¥Ä·¥Ö·¥Ä ·¥õ·¥è·¥ç ô·¥è ü ·¥õ·¥è·¥ç ô·¥è ü ·¥Ö…™  ô·¥Ä·¥°·¥Ä ú ·¥ú…¥·¥õ·¥ú·¥ã ·¥ç·¥á…¥…¢ ú·¥Äs…™ ü·¥ã·¥Ä…¥ s·¥õ Ä…™…¥…¢ ·¥Ä…¥·¥Ö·¥Ä :</b>",
            reply_markup=gen_key,
        )
    elif query.startswith("pyrogram") or query.startswith("telethon"):
        try:
            if query == "pyrogram":
                await gen_session(cq.message, cq.from_user.id)
            elif query == "pyrogram1":
                await gen_session(cq.message, cq.from_user.id, old_pyro=True)
            elif query == "telethon":
                await gen_session(cq.message, cq.from_user.id, telethon=True)
        except Exception as e:
            await cq.edit_message_text(e, disable_web_page_preview=True)

async def gen_session(
    message, user_id: int, telethon: bool = False, old_pyro: bool = False
):
    if telethon:
        ty = f"·¥õ·¥á ü·¥á·¥õ ú·¥è…¥"
    elif old_pyro:
        ty = f"·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç v1"
    else:
        ty = f"·¥© è Ä·¥è…¢ Ä·¥Ä·¥ç v2"

    await message.reply_text(f"¬ª  ü·¥Ä…¢…™ ·¥Ñ·¥è ô·¥Ä {ty} …¥…¢·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢ ·¥Ä…¥·¥Ö·¥Ä...")

    try:
        api_id = await dispatcher.bot.ask(
            identifier=(message.chat.id, user_id, None),
            text="¬ª ·¥ç·¥Äs·¥ú·¥ã…™…¥ ·¥Ä·¥ò…™ …™·¥Ö  ü·¥ú  ô·¥ú Ä·¥ú :",
            filters=filters.text,
            timeout=300,
        )
    except ListenerTimeout:
        return await update.effective_message.reply_text("¬ª  è·¥Ä ú ·¥ã·¥á ü·¥Ä·¥ç·¥Ä·¥Ä…¥ ·¥ã·¥á ô·¥ú Ä·¥ú ùüª ·¥ç·¥á…¥…™·¥õ ·¥ã·¥Ä…¥.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    if await cancelled(api_id):
        return

    try:
        api_id = int(api_id.text)
    except ValueError:
        return await update.effective_message.reply_text("¬ª ·¥Ä·¥ò…™ …™·¥Ö  ü·¥ú s·¥Ä ü·¥Ä ú  ô ü·¥è…¢.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    try:
        api_hash = await dispatcher.bot.ask(
            identifier=(message.chat.id, user_id, None),
            text="¬ª ·¥ç·¥Äs·¥ú·¥ã…™…¥ ·¥Ä·¥ò…™  ú·¥Äs ú  ü·¥ú  ô·¥ú Ä·¥ú :",
            filters=filters.text,
            timeout=300,
        )
    except ListenerTimeout:
        return await update.effective_message.reply_text("¬ª  è·¥Ä ú ·¥ã·¥á ü·¥Ä·¥ç·¥Ä·¥Ä…¥ ·¥ã·¥á ô·¥ú Ä·¥ú ùüª ·¥ç·¥á…¥…™·¥õ ·¥ã·¥Ä…¥.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    if await cancelled(api_hash):
        return

    api_hash = api_hash.text

    if len(api_hash) < 30:
        return await update.effective_message.reply_text("¬ª ·¥Ä·¥ò…™  ú·¥Äs ú  ü·¥ú s·¥Ä ü·¥Ä ú  ô ü·¥è…¢.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    try:
        phone_number = await dispatcher.bot.ask(
            identifier=(message.chat.id, user_id, None),
            text="¬ª ·¥ç·¥Äs·¥ú·¥ã…™…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á  ü·¥ú  ô·¥ú Ä·¥ú :",
            filters=filters.text,
            timeout=300,
        )
    except ListenerTimeout:
        return await update.effective_message.reply_text("¬ª  è·¥Ä ú ·¥ã·¥á ü·¥Ä·¥ç·¥Ä·¥Ä…¥ ·¥ã·¥á ô·¥ú Ä·¥ú ùüª ·¥ç·¥á…¥…™·¥õ ·¥ã·¥Ä…¥.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    if await cancelled(phone_number):
        return
    phone_number = phone_number.text

    await update.effective_message.reply_text("¬ª  ü·¥Ä…¢…™ …¥ è·¥è ô·¥Ä …¥…¢…™ Ä…™·¥ç…™…¥ ·¥è·¥õ·¥ò ·¥ã·¥á ·¥Ä·¥ã·¥ú…¥  ü·¥ú...")
    if telethon:
        client = TelegramClient(StringSession(), api_id, api_hash)
    elif old_pyro:
        client = Client1(":memory:", api_id=api_id, api_hash=api_hash)
    else:
        client = Client(name="pbot", api_id=api_id, api_hash=api_hash, in_memory=True)
    await client.connect()

    try:
        if telethon:
            code = await client.send_code_request(phone_number)
        else:
            code = await client.send_code(phone_number)
        await asyncio.sleep(1)

    except FloodWait as f:
        return await update.effective_message.reply_text("¬ª …¢·¥Ä…¢·¥Ä ü …¥…¢…™ Ä…™·¥ç ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò ·¥ã·¥á ·¥Ä·¥ã·¥ú…¥  ü·¥ú.\n\n ú·¥Ä Ä·¥Ä·¥ò ·¥õ·¥ú…¥…¢…¢·¥ú {f.value or f.x} s·¥á·¥Ñ·¥è…¥·¥Ös ·¥Ö·¥Ä…¥ ·¥Ñ·¥è ô·¥Ä  ü·¥Ä…¢…™.",
            reply_markup=retry_key,
        )
    except (ApiIdInvalid, ApiIdInvalidError, ApiIdInvalid1):
        return await update.effective_message.reply_text("¬ª ·¥Ä·¥ò…™  ú·¥Äs ú ·¥Ä·¥õ·¥Ä·¥ú ·¥Ä·¥ò…™ …™·¥Ö  ü·¥ú s·¥Ä ü·¥Ä ú  ô ü·¥è…¢.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )
    except (PhoneNumberInvalid, PhoneNumberInvalidError, PhoneNumberInvalid1):
        return await update.effective_message.reply_text("¬ª ·¥ç·¥Äs·¥ú·¥ã…™…¥ …¥·¥è·¥ç·¥è Ä ·¥õ·¥á ü·¥á s·¥Ä ü·¥Ä ú  ô ü·¥è…¢  ü·¥ú\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    try:
        otp = await dispatcher.bot.ask(
            identifier=(message.chat.id, user_id, None),
            text=f"·¥ç·¥Äs·¥ú·¥ã…™…¥ ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò  ü·¥ú ·¥Ö·¥Ä Ä…™ …¥·¥è·¥ç·¥è Ä {phone_number}.\n\n·¥ã·¥Ä ü·¥è ·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò…¥ è·¥Ä <code>12345</code>, ·¥õ·¥è ü·¥è…¥…¢ ·¥ã…™ Ä…™·¥ç·¥ã·¥Ä…¥ s·¥á·¥ò·¥á Ä·¥õ…™ …™…¥…™ <code>1 2 3 4 5.</code>",
            filters=filters.text,
            timeout=600,
        )
        if await cancelled(otp):
            return
    except ListenerTimeout:
        return await update.effective_message.reply_text("¬ª  è·¥Ä ú ·¥ã·¥á ü·¥Ä·¥ç·¥Ä·¥Ä…¥ ·¥ã·¥á ô·¥ú Ä·¥ú 10 ·¥ç·¥á…¥…™·¥õ ·¥ã·¥Ä…¥.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )

    otp = otp.text.replace(" ", "")
    try:
        if telethon:
            await client.sign_in(phone_number, otp, password=None)
        else:
            await client.sign_in(phone_number, code.phone_code_hash, otp)
    except (PhoneCodeInvalid, PhoneCodeInvalidError, PhoneCodeInvalid1):
        return await update.effective_message.reply_text("¬ª <b>·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò  è…¢  ü·¥ú ·¥ç·¥Äs·¥ú·¥ã…™…¥ s·¥Ä ü·¥Ä ú.</b>\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )
    except (PhoneCodeExpired, PhoneCodeExpiredError, PhoneCodeExpired1):
        return await update.effective_message.reply_text("¬ª <b>·¥ã·¥è·¥Ö·¥á ·¥è·¥õ·¥ò  è…¢  ü·¥ú ·¥ç·¥Äs·¥ú·¥ã…™…¥ ·¥áx·¥ò…™ Ä·¥á·¥Ö.</b>\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
            reply_markup=retry_key,
        )
    except (SessionPasswordNeeded, SessionPasswordNeededError, SessionPasswordNeeded1):
        try:
            pwd = await dispatcher.bot.ask(
                identifier=(message.chat.id, user_id, None),
                text="¬ª ·¥ç·¥Äs·¥ú·¥ã…™…¥ ·¥ò·¥° ·¥†·¥á Ä…™“ì ùü∏  ü·¥Ä…¥…¢·¥ã·¥Ä ú  ü·¥ú :",
                filters=filters.text,
                timeout=300,
            )
        except ListenerTimeout:
            return update.effective_message.reply_text("¬ª  è·¥Ä ú ·¥ã·¥á ü·¥Ä·¥ç·¥Ä·¥Ä…¥ ·¥ã·¥á ô·¥ú Ä·¥ú ùüª ·¥ç·¥á…¥…™·¥õ ·¥ã·¥Ä…¥.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
                reply_markup=retry_key,
            )

        if await cancelled(pwd):
            return
        pwd = pwd.text

        try:
            if telethon:
                await client.sign_in(password=pwd)
            else:
                await client.check_password(password=pwd)
        except (PasswordHashInvalid, PasswordHashInvalidError, PasswordHashInvalid1):
            return await update.effective_message.reply_text("¬ª ·¥ò·¥° ·¥†·¥á Ä…™“ì ùü∏  ü·¥Ä…¥…¢·¥ã·¥Ä ú  ü·¥ú s·¥Ä ü·¥Ä ú.\n\n·¥ã ü…™·¥ã /start  ô·¥ú·¥Ä·¥õ ·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ô·¥Ä Ä·¥ú.",
                reply_markup=retry_key,
            )

    except Exception as ex:
        return await update.effective_message.reply_text(user_id, f"·¥á Ä Ä·¥è Ä : <code>{str(ex)}</code>")

    try:
        txt = "…¥…™ ú {0} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥  ü·¥ú\n\n<code>{1}</code>\n\n·¥Ä s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä  ô·¥è·¥õ  ô è <a href={2}>s…™ ·¥ßÍùõ·¥ß ô</a>\n‚ò† <b>…¥·¥è·¥õ·¥á :</b> J·¥Ä…¥…¢·¥Ä…¥  ü·¥ú s·¥á ô·¥Ä Ä…™…¥  ô·¥ú·¥Ä·¥õ ·¥ò…™…¥J·¥è ü."
        if telethon:
            string_session = client.session.save()
            await client.send_message(
                "me",
                txt.format(ty, string_session, SUPPORT_CHAT),
                link_preview=False,
                parse_mode="html",
            )
            await client(JoinChannelRequest("@Arabc0de"))
            await client(JoinChannelRequest("@Cehaarab"))
        else:
            string_session = await client.export_session_string()
            await client.send_message(
                "me",
                txt.format(ty, string_session, SUPPORT_CHAT),
                disable_web_page_preview=True,
            )
            await client.join_chat("SiArab_Support")
    except KeyError:
        pass
    try:
        await client.disconnect()
        await update.effective_message.reply_text("…¥…™ ú s·¥õ Ä…™…¥…¢  ü·¥ú ·¥ú·¥Ö·¥Ä ú J·¥Ä·¥Ö…™ {ty} s·¥õ Ä…™…¥…¢ s·¥áss…™·¥è…¥.\n\n·¥Ñ·¥á·¥ã ·¥ò·¥ás·¥Ä…¥ ·¥õ·¥á Äs…™·¥ç·¥ò·¥Ä…¥  ü·¥ú  è·¥Ä…¥…¢  ô·¥Ä…¥ è·¥Ä·¥ã  ô·¥è·¥ã·¥á·¥ò…¥ è·¥Ä.\n\n·¥Ä s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ·¥è Ä  ô·¥è·¥õ  ô è <a href={SUPPORT_CHAT}>s…™ ·¥ßÍùõ·¥ß ô</a>.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="·¥ò·¥ás·¥Ä…¥ ·¥õ·¥á Äs…™·¥ç·¥ò·¥Ä…¥  ü·¥ú",
                            url=f"tg://openmessage?user_id={user_id}",
                        )
                    ]
                ]
            ),
            disable_web_page_preview=True,
        )
    except:
        pass


async def cancelled(message):
    if "/cancel" in message.text:
        await message.reply_text(
            "¬ª …¥…¢·¥á ô·¥Ä·¥õ·¥Ä ü…™…¥ ·¥ò Ä·¥ès·¥ás …¥…¢·¥Ä·¥ç ô…™ ü s·¥õ Ä…™…¥…¢  ü·¥ú.", reply_markup=retry_key
        )
        return True
    elif "/restart" in message.text:
        await message.reply_text(
            "¬ª s·¥ú·¥ãs·¥ás …¥…¢·¥á Ä·¥ás·¥õ·¥Ä Ä·¥õ  ô·¥è·¥õ.", reply_markup=retry_key
        )
        return True
    elif message.text.startswith("/"):
        await message.reply_text(
            "¬ª ·¥Ñ·¥Ä…¥·¥Ñ·¥á ü ü·¥á·¥Ö ·¥õ ú·¥á ·¥è…¥…¢·¥è…™…¥…¢ s·¥õ Ä…™…¥…¢ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥ ·¥© Ä·¥è·¥Ñ·¥áss.", reply_markup=retry_key
        )
        return True
    else:
        return False
